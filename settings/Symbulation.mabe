// These are the default settings in Symbulation's default mode (we do reproduce these results correctly!)
random_seed = 0;                // Seed for random number generator; use 0 to base on time.
Var pop_size = 10000;            // Number of organisms to evaluate in the population.
Var max_ud = 1000;

Population hosts;
Population symbionts;

MaxSizePlacement h_placement {
    target = "hosts";
    max_pop_size = pop_size;
};
FreeListPlacement s_placement {
    target = "symbionts";
};

HostOrg host_org {
    sym_pop = "symbionts";
};
SymbiontOrg sym_org;

EvalIntVal eval {
    synergy = 5.0;
    points_per_update = 100.0;
};
SelectPoints select_host {
    points_threshold = 1000;
};
SelectPoints select_sym {
    points_threshold = 100;
};
SymManager sym_manager {
    sym_vert_trans_prob = 0.7;
    sym_vert_trans_points = 0.0;
};
InheritedValue _genome {
    value_trait = "int_val";
};

@START() {
  PRINT("random_seed = ", random_seed, "\n");  // Print seed at run start.
  symbionts.INJECT("sym_org", pop_size);
  hosts.INJECT("host_org", pop_size);            // Inject ancestor organisms
};

@UPDATE(Var ud) {
  IF (ud == max_ud) EXIT();

  IF (GET_UPDATE() % 100 == 0 || GET_UPDATE() == 1) {
    PRINT("UD:", GET_UPDATE(),
        "  HostPopSize=", hosts.SIZE(),
        "  SymPopSize=", symbionts.SIZE(),
        "  AveIntVal=", hosts.CALC_MEAN("int_val"),
        "  MinIntVal=", hosts.CALC_MIN("int_val"),
        "  MaxIntVal=", hosts.CALC_MAX("int_val"),
        "  SAveIntVal=", symbionts.CALC_MEAN("int_val"),
        "  SMinIntVal=", symbionts.CALC_MIN("int_val"),
        "  SMaxIntVal=", symbionts.CALC_MAX("int_val")
       );
  }

  eval.EVAL(hosts);
  select_host.SELECT(hosts, hosts);
  select_sym.SELECT(symbionts, symbionts);
}
